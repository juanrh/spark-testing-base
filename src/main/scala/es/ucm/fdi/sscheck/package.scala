package es.ucm.fdi

import org.scalacheck.Gen

package object sscheck  {
  type Batch[A] = Seq[A]
  type DStream[A] = Seq[Batch[A]]
  
  def emptyBatch : Batch[Nothing] = List()
 
  /** @return a generator for the batch-by-batch concatenation of the dstreams 
   *  generated by gs1 and gs2. Note we fill empty batches of either dstreams. 
   *  This implies dstreams are implicitly treated as they where infinitely extended 
   *  with empty batches  
   */
  def dstreamUnion[A](gs1 : Gen[DStream[A]], gs2 : Gen[DStream[A]]) : Gen[DStream[A]] = {
    for {
      xs1 <- gs1
      xs2 <- gs2
    } yield xs1 zipAll(xs2, emptyBatch, emptyBatch) map(xs12 => xs12._1 ++ xs12._2)
  }
}